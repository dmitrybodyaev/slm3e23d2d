from flask import Flask, request, jsonify
from models import db, User, Tour, Booking
from flask_jwt_extended import create_access_token, jwt_required, JWTManager
from flasgger import Swagger
from flask_jwt_extended import get_jwt_identity

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.config['JWT_SECRET_KEY'] = 'super-secret'
app.config['SWAGGER'] = {'title': 'Tour Agency API', 'uiversion': 3}

Swagger(app)
db.init_app(app)
jwt = JWTManager(app)

with app.app_context():
    db.create_all()

@app.route('/register', methods=['POST'])
def register():
    username = request.form['username']
    password = request.form['password']
    db.session.add(User(username=username, password=password))
    db.session.commit()
    return jsonify(message="Пользователь создан")

@app.route('/login', methods=['POST'])
def login():
    user = User.query.filter_by(username=request.form['username']).first()
    if user and user.password == request.form['password']:
        token = create_access_token(identity=user.id)
        return jsonify(access_token=token)
    return jsonify(message="Неверные данные"), 401

@app.route('/tours', methods=['GET'])
@jwt_required()
def get_tours():
    tours = Tour.query.all()
    return jsonify([{"id": t.id, "destination": t.destination, "price": t.price} for t in tours])

@app.route('/book', methods=['POST'])
@jwt_required()
def book_tour():
    tour_id = int(request.form['tour_id'])
    user_id = get_jwt_identity()
    db.session.add(Booking(tour_id=tour_id, user_id=user_id))
    db.session.commit()
    return jsonify(message="Бронирование успешно"), 201

if __name__ == '__main__':
    app.run(debug=True)
